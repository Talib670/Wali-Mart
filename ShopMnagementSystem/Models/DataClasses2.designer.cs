#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShopMnagementSystem.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ShopManage")]
	public partial class DataClasses2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserttbltotalsale(tbltotalsale instance);
    partial void Updatetbltotalsale(tbltotalsale instance);
    partial void Deletetbltotalsale(tbltotalsale instance);
    #endregion
		
		public DataClasses2DataContext() : 
				base(global::ShopMnagementSystem.Properties.Settings.Default.ShopManageConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tbltotalsale> tbltotalsales
		{
			get
			{
				return this.GetTable<tbltotalsale>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbltotalsale")]
	public partial class tbltotalsale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _totalsale;
		
		private System.Nullable<System.DateTime> _datetime;
		
		private string _Recipt_No;
		
		private string _Profit;
		
		private string _Totalpurchase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntotalsaleChanging(string value);
    partial void OntotalsaleChanged();
    partial void OndatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OndatetimeChanged();
    partial void OnRecipt_NoChanging(string value);
    partial void OnRecipt_NoChanged();
    partial void OnProfitChanging(string value);
    partial void OnProfitChanged();
    partial void OnTotalpurchaseChanging(string value);
    partial void OnTotalpurchaseChanged();
    #endregion
		
		public tbltotalsale()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalsale", DbType="VarChar(150)")]
		public string totalsale
		{
			get
			{
				return this._totalsale;
			}
			set
			{
				if ((this._totalsale != value))
				{
					this.OntotalsaleChanging(value);
					this.SendPropertyChanging();
					this._totalsale = value;
					this.SendPropertyChanged("totalsale");
					this.OntotalsaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> datetime
		{
			get
			{
				return this._datetime;
			}
			set
			{
				if ((this._datetime != value))
				{
					this.OndatetimeChanging(value);
					this.SendPropertyChanging();
					this._datetime = value;
					this.SendPropertyChanged("datetime");
					this.OndatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Recipt No]", Storage="_Recipt_No", DbType="VarChar(100)")]
		public string Recipt_No
		{
			get
			{
				return this._Recipt_No;
			}
			set
			{
				if ((this._Recipt_No != value))
				{
					this.OnRecipt_NoChanging(value);
					this.SendPropertyChanging();
					this._Recipt_No = value;
					this.SendPropertyChanged("Recipt_No");
					this.OnRecipt_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profit", DbType="VarChar(200)")]
		public string Profit
		{
			get
			{
				return this._Profit;
			}
			set
			{
				if ((this._Profit != value))
				{
					this.OnProfitChanging(value);
					this.SendPropertyChanging();
					this._Profit = value;
					this.SendPropertyChanged("Profit");
					this.OnProfitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Totalpurchase", DbType="VarChar(255)")]
		public string Totalpurchase
		{
			get
			{
				return this._Totalpurchase;
			}
			set
			{
				if ((this._Totalpurchase != value))
				{
					this.OnTotalpurchaseChanging(value);
					this.SendPropertyChanging();
					this._Totalpurchase = value;
					this.SendPropertyChanged("Totalpurchase");
					this.OnTotalpurchaseChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
